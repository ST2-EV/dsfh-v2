{"ast":null,"code":"var _jsxFileName = \"/home/retr0/Documents/Projects/dsfh-dashboard/src/components/Inference.js\";\nimport React, { Component } from \"react\";\nimport axios from \"axios\";\nimport { Button, Input, Alert, Label } from \"reactstrap\";\nimport { db } from \"../fire\";\nconst styles = {\n  marginTop: \"80px\"\n};\nconst stylestwo = {\n  textAlign: \"center\",\n  mariginTop: \"10px\",\n  padding: \"20px\"\n};\nexport default class Inference extends Component {\n  constructor(...args) {\n    super(...args);\n    this.state = {\n      selectedFile: null,\n      prediction: \"\",\n      error: \"\",\n      model_data: [],\n      model: \"--select--\"\n    };\n\n    this.onChangeHandler = event => [this.setState({\n      model: event.target.data\n    })];\n\n    this.fileChangedHandler = event => {\n      this.setState({\n        selectedFile: event.target.files[0]\n      });\n    };\n\n    this.uploadHandler = () => {\n      const formData = new FormData();\n      formData.append(\"file\", this.state.selectedFile, this.state.selectedFile.name);\n      axios.post(\"https://api-2445582824322.staging.gw.apicast.io/deploy/Skin-Cancer-Detector/a/?user_key=402d46c6d21b86e66339d12e79e05366\", formData).then(res => {\n        console.log(res.data);\n\n        if (res.data.prediction) {\n          this.setState({\n            prediction: res.data.prediction\n          });\n        } else {\n          this.setState({\n            error: \"Inference did not work! Check again later\"\n          });\n        }\n      });\n    };\n  }\n\n  componentDidMount() {\n    db.collection(\"Models\").get().then(querySnapshot => {\n      const data = querySnapshot.docs.map(doc => doc.data());\n      this.setState({\n        model_data: data\n      });\n    });\n  }\n\n  render() {\n    return React.createElement(\"div\", {\n      style: styles,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 61\n      },\n      __self: this\n    }, React.createElement(Label, {\n      for: \"selectModels\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 62\n      },\n      __self: this\n    }, \"Select\"), React.createElement(Input, {\n      type: \"select\",\n      name: \"select\",\n      id: \"selectModels\",\n      value: this.state.model,\n      onChange: this.onChange,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 63\n      },\n      __self: this\n    }, React.createElement(\"option\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 70\n      },\n      __self: this\n    }, \"--select--\"), this.state.model_data.map((data, index) => React.createElement(\"option\", {\n      key: index,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 72\n      },\n      __self: this\n    }, data.name))), React.createElement(Input, {\n      type: \"file\",\n      onChange: this.fileChangedHandler,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 75\n      },\n      __self: this\n    }), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 76\n      },\n      __self: this\n    }), React.createElement(Button, {\n      color: \"primary\",\n      onClick: this.uploadHandler,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 77\n      },\n      __self: this\n    }, \"Upload!\"), this.state.error && React.createElement(\"div\", {\n      style: stylestwo,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 82\n      },\n      __self: this\n    }, React.createElement(\"p\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 83\n      },\n      __self: this\n    }, React.createElement(Alert, {\n      color: \"danger\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 84\n      },\n      __self: this\n    }, this.state.error_data))), this.state.prediction && React.createElement(\"div\", {\n      style: stylestwo,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 89\n      },\n      __self: this\n    }, React.createElement(Alert, {\n      color: \"success\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 90\n      },\n      __self: this\n    }, \"The disease is \", this.state.prediction, \".\")));\n  }\n\n}","map":{"version":3,"sources":["/home/retr0/Documents/Projects/dsfh-dashboard/src/components/Inference.js"],"names":["React","Component","axios","Button","Input","Alert","Label","db","styles","marginTop","stylestwo","textAlign","mariginTop","padding","Inference","state","selectedFile","prediction","error","model_data","model","onChangeHandler","event","setState","target","data","fileChangedHandler","files","uploadHandler","formData","FormData","append","name","post","then","res","console","log","componentDidMount","collection","get","querySnapshot","docs","map","doc","render","onChange","index","error_data"],"mappings":"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","sourcesContent":["import React, { Component } from \"react\";\nimport axios from \"axios\";\nimport { Button, Input, Alert, Label } from \"reactstrap\";\nimport { db } from \"../fire\";\n\nconst styles = {\n  marginTop: \"80px\"\n};\nconst stylestwo = {\n  textAlign: \"center\",\n\n  mariginTop: \"10px\",\n  padding: \"20px\"\n};\n\nexport default class Inference extends Component {\n  state = {\n    selectedFile: null,\n    prediction: \"\",\n    error: \"\",\n    model_data: [],\n    model: \"--select--\"\n  };\n\n  componentDidMount() {\n    db.collection(\"Models\")\n      .get()\n      .then(querySnapshot => {\n        const data = querySnapshot.docs.map(doc => doc.data());\n        this.setState({ model_data: data });\n      });\n  }\n  onChangeHandler = event => [this.setState({ model: event.target.data })];\n  fileChangedHandler = event => {\n    this.setState({ selectedFile: event.target.files[0] });\n  };\n  uploadHandler = () => {\n    const formData = new FormData();\n    formData.append(\n      \"file\",\n      this.state.selectedFile,\n      this.state.selectedFile.name\n    );\n    axios\n      .post(\n        \"https://api-2445582824322.staging.gw.apicast.io/deploy/Skin-Cancer-Detector/a/?user_key=402d46c6d21b86e66339d12e79e05366\",\n        formData\n      )\n      .then(res => {\n        console.log(res.data);\n        if (res.data.prediction) {\n          this.setState({ prediction: res.data.prediction });\n        } else {\n          this.setState({ error: \"Inference did not work! Check again later\" });\n        }\n      });\n  };\n\n  render() {\n    return (\n      <div style={styles}>\n        <Label for=\"selectModels\">Select</Label>\n        <Input\n          type=\"select\"\n          name=\"select\"\n          id=\"selectModels\"\n          value={this.state.model}\n          onChange={this.onChange}\n        >\n          <option>--select--</option>\n          {this.state.model_data.map((data, index) => (\n            <option key={index}>{data.name}</option>\n          ))}\n        </Input>\n        <Input type=\"file\" onChange={this.fileChangedHandler} />\n        <br />\n        <Button color=\"primary\" onClick={this.uploadHandler}>\n          Upload!\n        </Button>\n\n        {this.state.error && (\n          <div style={stylestwo}>\n            <p>\n              <Alert color=\"danger\">{this.state.error_data}</Alert>\n            </p>\n          </div>\n        )}\n        {this.state.prediction && (\n          <div style={stylestwo}>\n            <Alert color=\"success\">\n              The disease is {this.state.prediction}.\n            </Alert>\n          </div>\n        )}\n      </div>\n    );\n  }\n}\n"]},"metadata":{},"sourceType":"module"}