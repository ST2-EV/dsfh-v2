{"ast":null,"code":"var _jsxFileName = \"/home/retr0/Documents/Projects/dsfh-dashboard/src/components/Inference.js\";\nimport React, { Component } from \"react\";\nimport axios from \"axios\";\nimport { Button, Input, Alert, Label } from \"reactstrap\";\nimport { db } from \"../fire\";\nimport Loading from \"./Loading\";\nconst styles = {\n  marginTop: \"80px\"\n};\nconst stylestwo = {\n  textAlign: \"center\",\n  mariginTop: \"10px\",\n  padding: \"20px\"\n};\nexport default class Inference extends Component {\n  constructor(...args) {\n    super(...args);\n    this.state = {\n      selectedFile: null,\n      prediction: \"\",\n      error: \"\",\n      model_data: [],\n      model: \"--select--\",\n      loading: false\n    };\n\n    this.onChangeHandler = event => {\n      this.setState({\n        model: event.target.value\n      });\n    };\n\n    this.fileChangedHandler = event => {\n      this.setState({\n        selectedFile: event.target.files[0]\n      });\n    };\n\n    this.uploadHandler = () => {\n      this.setState({\n        loading: true,\n        error: \"\"\n      });\n\n      if (this.state.model === \"--select--\") {\n        this.setState({\n          error: \"Please select a model\",\n          loading: false,\n          prediction: \"\"\n        });\n      } else {\n        const url = \"https://api-2445582824322.staging.gw.apicast.io/deploy/\" + this.state.model + \"/a/?user_key=402d46c6d21b86e66339d12e79e05366\";\n        const formData = new FormData();\n        formData.append(\"file\", this.state.selectedFile, this.state.selectedFile.name);\n        axios.post(url, formData).then(res => {\n          if (res.data.prediction) {\n            this.setState({\n              prediction: res.data.prediction,\n              loading: false\n            });\n          } else {\n            this.setState({\n              error: \"Inference did not work! Check again later\",\n              loading: false\n            });\n          }\n        });\n      }\n    };\n  }\n\n  componentDidMount() {\n    db.collection(\"Models\").get().then(querySnapshot => {\n      const data = querySnapshot.docs.map(doc => doc.data());\n      this.setState({\n        model_data: data\n      });\n    });\n  }\n\n  render() {\n    return React.createElement(\"div\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 76\n      },\n      __self: this\n    }, React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 77\n      },\n      __self: this\n    }), React.createElement(Label, {\n      for: \"selectModels\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 78\n      },\n      __self: this\n    }, React.createElement(\"strong\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 79\n      },\n      __self: this\n    }, \"Select Model:\")), React.createElement(Input, {\n      type: \"select\",\n      name: \"select\",\n      id: \"selectModels\",\n      value: this.state.model,\n      onChange: this.onChangeHandler,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 81\n      },\n      __self: this\n    }, React.createElement(\"option\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 88\n      },\n      __self: this\n    }, \"--select--\"), this.state.model_data.map((data, index) => React.createElement(\"option\", {\n      key: index,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 90\n      },\n      __self: this\n    }, data.name))), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 93\n      },\n      __self: this\n    }), React.createElement(Input, {\n      type: \"file\",\n      onChange: this.fileChangedHandler,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 94\n      },\n      __self: this\n    }), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 95\n      },\n      __self: this\n    }), !this.state.loading && React.createElement(Button, {\n      color: \"primary\",\n      onClick: this.uploadHandler,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 97\n      },\n      __self: this\n    }, \"Run Test\"), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 101\n      },\n      __self: this\n    }), this.state.loading && React.createElement(Loading, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 102\n      },\n      __self: this\n    }), this.state.error && React.createElement(\"div\", {\n      style: stylestwo,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 105\n      },\n      __self: this\n    }, React.createElement(Alert, {\n      color: \"danger\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 106\n      },\n      __self: this\n    }, this.state.error)), this.state.prediction && React.createElement(\"div\", {\n      style: stylestwo,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 110\n      },\n      __self: this\n    }, React.createElement(Alert, {\n      color: \"success\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 111\n      },\n      __self: this\n    }, \"The disease is \", this.state.prediction, \".\")));\n  }\n\n}","map":{"version":3,"sources":["/home/retr0/Documents/Projects/dsfh-dashboard/src/components/Inference.js"],"names":["React","Component","axios","Button","Input","Alert","Label","db","Loading","styles","marginTop","stylestwo","textAlign","mariginTop","padding","Inference","state","selectedFile","prediction","error","model_data","model","loading","onChangeHandler","event","setState","target","value","fileChangedHandler","files","uploadHandler","url","formData","FormData","append","name","post","then","res","data","componentDidMount","collection","get","querySnapshot","docs","map","doc","render","index"],"mappings":"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","sourcesContent":["import React, { Component } from \"react\";\nimport axios from \"axios\";\nimport { Button, Input, Alert, Label } from \"reactstrap\";\n\nimport { db } from \"../fire\";\nimport Loading from \"./Loading\";\n\nconst styles = {\n  marginTop: \"80px\"\n};\nconst stylestwo = {\n  textAlign: \"center\",\n\n  mariginTop: \"10px\",\n  padding: \"20px\"\n};\n\nexport default class Inference extends Component {\n  state = {\n    selectedFile: null,\n    prediction: \"\",\n    error: \"\",\n    model_data: [],\n    model: \"--select--\",\n    loading: false\n  };\n\n  componentDidMount() {\n    db.collection(\"Models\")\n      .get()\n      .then(querySnapshot => {\n        const data = querySnapshot.docs.map(doc => doc.data());\n        this.setState({ model_data: data });\n      });\n  }\n  onChangeHandler = event => {\n    this.setState({ model: event.target.value });\n  };\n  fileChangedHandler = event => {\n    this.setState({ selectedFile: event.target.files[0] });\n  };\n  uploadHandler = () => {\n    this.setState({ loading: true, error: \"\" });\n    if (this.state.model === \"--select--\") {\n      this.setState({\n        error: \"Please select a model\",\n        loading: false,\n        prediction: \"\"\n      });\n    } else {\n      const url =\n        \"https://api-2445582824322.staging.gw.apicast.io/deploy/\" +\n        this.state.model +\n        \"/a/?user_key=402d46c6d21b86e66339d12e79e05366\";\n      const formData = new FormData();\n      formData.append(\n        \"file\",\n        this.state.selectedFile,\n        this.state.selectedFile.name\n      );\n      axios.post(url, formData).then(res => {\n        if (res.data.prediction) {\n          this.setState({ prediction: res.data.prediction, loading: false });\n        } else {\n          this.setState({\n            error: \"Inference did not work! Check again later\",\n            loading: false\n          });\n        }\n      });\n    }\n  };\n\n  render() {\n    return (\n      <div>\n        <br />\n        <Label for=\"selectModels\">\n          <strong>Select Model:</strong>\n        </Label>\n        <Input\n          type=\"select\"\n          name=\"select\"\n          id=\"selectModels\"\n          value={this.state.model}\n          onChange={this.onChangeHandler}\n        >\n          <option>--select--</option>\n          {this.state.model_data.map((data, index) => (\n            <option key={index}>{data.name}</option>\n          ))}\n        </Input>\n        <br />\n        <Input type=\"file\" onChange={this.fileChangedHandler} />\n        <br />\n        {!this.state.loading && (\n          <Button color=\"primary\" onClick={this.uploadHandler}>\n            Run Test\n          </Button>\n        )}\n        <br />\n        {this.state.loading && <Loading />}\n\n        {this.state.error && (\n          <div style={stylestwo}>\n            <Alert color=\"danger\">{this.state.error}</Alert>\n          </div>\n        )}\n        {this.state.prediction && (\n          <div style={stylestwo}>\n            <Alert color=\"success\">\n              The disease is {this.state.prediction}.\n            </Alert>\n          </div>\n        )}\n      </div>\n    );\n  }\n}\n"]},"metadata":{},"sourceType":"module"}