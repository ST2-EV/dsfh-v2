{"ast":null,"code":"var _jsxFileName = \"/home/retr0/Documents/Projects/dsfh-dashboard/src/components/DeployForm.js\";\nimport React, { Component } from \"react\";\nimport { Button, Form, FormGroup, Label, Input, ButtonGroup, ButtonToolbar, Alert } from \"reactstrap\";\nimport { db } from \"../fire\";\nimport io from \"socket.io-client\";\nimport Loading from \"./Loading\";\nimport QRModal from \"./QRModal\";\nconst styles = {\n  marginTop: \"80px\"\n};\nconst stylestwo = {\n  textAlign: \"center\",\n  mariginTop: \"10px\",\n  padding: \"20px\"\n};\nconst socket = io.connect(\"http://127.0.0.1:8000\");\n\nclass DeployForm extends Component {\n  constructor(...args) {\n    super(...args);\n    this.state = {\n      model_name: \"\",\n      description: \"\",\n      diseases: [],\n      labels: [],\n      deployed_model: {},\n      deployed_model_bool: false,\n      loading: false,\n      error_data: \"\",\n      after_train: false\n    };\n\n    this.onChange = e => {\n      this.setState({\n        [e.target.name]: e.target.value\n      });\n    };\n\n    this.fetchFromDB = () => {\n      this.setState({\n        loading: true\n      });\n      db.collection(\"Images\").get().then(querySnapshot => {\n        const data = querySnapshot.docs.map(doc => doc.data()); //console.log(data);\n\n        var temp = [];\n\n        for (var i = 0; i < data.length; i++) {\n          temp.push(data[i].label);\n        } //console.log(temp);\n\n\n        this.setState({\n          labels: temp\n        }); // array of cities objects\n      });\n      this.setState({\n        loading: false\n      });\n    };\n\n    this.onCheckboxBtnClick = selected => {\n      var array = [...this.state.diseases]; // make a separate copy of the array\n\n      var index = array.indexOf(selected);\n\n      if (index < 0) {\n        array.push(selected);\n      } else {\n        array.splice(index, 1);\n      }\n\n      this.setState({\n        diseases: array\n      });\n    };\n\n    this.onSubmit = event => {\n      this.setState({\n        loading: true\n      });\n      event.preventDefault();\n      const _this$state = this.state,\n            description = _this$state.description,\n            model_name = _this$state.model_name,\n            diseases = _this$state.diseases;\n      this.setState({\n        model_name: \"\",\n        description: \"\",\n        diseases: []\n      });\n      socket.emit(\"train\", {\n        labels: diseases,\n        description: description,\n        model: model_name\n      });\n      this.setState({\n        loading: false,\n        after_train: true\n      });\n      console.log(\"emitted\");\n      socket.on(\"trainResponse\", function (deployed_model_stats) {\n        this.setState({\n          deployed_model: deployed_model_stats,\n          deployed_model_bool: true,\n          loading: false\n        });\n        this.fetchFromDB();\n      }.bind(this));\n      socket.on(\"error\", function (error) {\n        this.setState({\n          error_data: error.message,\n          loading: false\n        });\n      }.bind(this)); // this.setState({ loading: false });\n    };\n  }\n\n  componentDidMount() {\n    this.fetchFromDB();\n  }\n\n  render() {\n    return React.createElement(\"div\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 116\n      },\n      __self: this\n    }, React.createElement(Form, {\n      onSubmit: this.onSubmit,\n      style: styles,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 117\n      },\n      __self: this\n    }, React.createElement(\"h5\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 118\n      },\n      __self: this\n    }, React.createElement(\"strong\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 119\n      },\n      __self: this\n    }, \"Make a new model:\")), React.createElement(FormGroup, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 121\n      },\n      __self: this\n    }, React.createElement(Label, {\n      for: \"Model-Name\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 122\n      },\n      __self: this\n    }, \"Model Name:\"), React.createElement(Input, {\n      type: \"text\",\n      name: \"model_name\",\n      id: \"model_name\",\n      value: this.state.model_name,\n      onChange: this.onChange,\n      required: true,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 123\n      },\n      __self: this\n    })), React.createElement(FormGroup, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 132\n      },\n      __self: this\n    }, React.createElement(Label, {\n      for: \"description\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 133\n      },\n      __self: this\n    }, \"Description:\"), React.createElement(Input, {\n      type: \"text\",\n      name: \"description\",\n      id: \"description\",\n      value: this.state.description,\n      onChange: this.onChange,\n      required: true,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 134\n      },\n      __self: this\n    })), React.createElement(\"p\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 143\n      },\n      __self: this\n    }, \"Select Diseases:\"), React.createElement(ButtonToolbar, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 144\n      },\n      __self: this\n    }, React.createElement(ButtonGroup, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 145\n      },\n      __self: this\n    }, this.state.labels.map((label, index) => React.createElement(Button, {\n      color: \"success\",\n      onClick: () => this.onCheckboxBtnClick(label),\n      active: this.state.diseases.includes(label),\n      key: index,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 147\n      },\n      __self: this\n    }, label))), React.createElement(ButtonGroup, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 157\n      },\n      __self: this\n    }, React.createElement(Button, {\n      onClick: this.fetchFromDB,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 158\n      },\n      __self: this\n    }, React.createElement(\"i\", {\n      className: \"fa fa-refresh\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 159\n      },\n      __self: this\n    })))), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 163\n      },\n      __self: this\n    }), !this.state.loading && React.createElement(Button, {\n      color: \"primary\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 164\n      },\n      __self: this\n    }, \"Deploy\"), this.state.loading && React.createElement(Loading, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 165\n      },\n      __self: this\n    }), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 166\n      },\n      __self: this\n    }), this.state.deployed_model_bool && React.createElement(\"div\", {\n      style: stylestwo,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 168\n      },\n      __self: this\n    }, React.createElement(\"p\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 169\n      },\n      __self: this\n    }, \"QR-Code:\", React.createElement(QRModal, {\n      name: this.state.deployed_model.name,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 171\n      },\n      __self: this\n    }))), this.state.error_data && React.createElement(\"div\", {\n      style: stylestwo,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 176\n      },\n      __self: this\n    }, React.createElement(\"p\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 177\n      },\n      __self: this\n    }, React.createElement(Alert, {\n      color: \"danger\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 178\n      },\n      __self: this\n    }, this.state.error_data))), this.state.after_train && React.createElement(\"div\", {\n      style: stylestwo,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 183\n      },\n      __self: this\n    }, React.createElement(\"p\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 184\n      },\n      __self: this\n    }, React.createElement(Alert, {\n      color: \"warning\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 185\n      },\n      __self: this\n    }, \"Please reload after sometime minutes(it may take 10mins to 45 min depending on the model).\")))));\n  }\n\n}\n\nexport default DeployForm;","map":{"version":3,"sources":["/home/retr0/Documents/Projects/dsfh-dashboard/src/components/DeployForm.js"],"names":["React","Component","Button","Form","FormGroup","Label","Input","ButtonGroup","ButtonToolbar","Alert","db","io","Loading","QRModal","styles","marginTop","stylestwo","textAlign","mariginTop","padding","socket","connect","DeployForm","state","model_name","description","diseases","labels","deployed_model","deployed_model_bool","loading","error_data","after_train","onChange","e","setState","target","name","value","fetchFromDB","collection","get","then","querySnapshot","data","docs","map","doc","temp","i","length","push","label","onCheckboxBtnClick","selected","array","index","indexOf","splice","onSubmit","event","preventDefault","emit","model","console","log","on","deployed_model_stats","bind","error","message","componentDidMount","render","includes"],"mappings":"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","sourcesContent":["import React, { Component } from \"react\";\nimport {\n  Button,\n  Form,\n  FormGroup,\n  Label,\n  Input,\n  ButtonGroup,\n  ButtonToolbar,\n  Alert\n} from \"reactstrap\";\nimport { db } from \"../fire\";\nimport io from \"socket.io-client\";\nimport Loading from \"./Loading\";\nimport QRModal from \"./QRModal\";\nconst styles = {\n  marginTop: \"80px\"\n};\nconst stylestwo = {\n  textAlign: \"center\",\n\n  mariginTop: \"10px\",\n  padding: \"20px\"\n};\nconst socket = io.connect(\"http://127.0.0.1:8000\");\nclass DeployForm extends Component {\n  state = {\n    model_name: \"\",\n    description: \"\",\n    diseases: [],\n    labels: [],\n    deployed_model: {},\n    deployed_model_bool: false,\n    loading: false,\n    error_data: \"\",\n    after_train: false\n  };\n\n  onChange = e => {\n    this.setState({ [e.target.name]: e.target.value });\n  };\n  fetchFromDB = () => {\n    this.setState({ loading: true });\n    db.collection(\"Images\")\n      .get()\n      .then(querySnapshot => {\n        const data = querySnapshot.docs.map(doc => doc.data());\n        //console.log(data);\n        var temp = [];\n        for (var i = 0; i < data.length; i++) {\n          temp.push(data[i].label);\n        }\n        //console.log(temp);\n        this.setState({ labels: temp }); // array of cities objects\n      });\n    this.setState({ loading: false });\n  };\n  componentDidMount() {\n    this.fetchFromDB();\n  }\n  onCheckboxBtnClick = selected => {\n    var array = [...this.state.diseases]; // make a separate copy of the array\n    var index = array.indexOf(selected);\n    if (index < 0) {\n      array.push(selected);\n    } else {\n      array.splice(index, 1);\n    }\n\n    this.setState({ diseases: array });\n  };\n\n  onSubmit = event => {\n    this.setState({ loading: true });\n    event.preventDefault();\n    const { description, model_name, diseases } = this.state;\n\n    this.setState({\n      model_name: \"\",\n      description: \"\",\n      diseases: []\n    });\n\n    socket.emit(\"train\", {\n      labels: diseases,\n      description: description,\n      model: model_name\n    });\n    this.setState({ loading: false, after_train: true });\n\n    console.log(\"emitted\");\n    socket.on(\n      \"trainResponse\",\n      function(deployed_model_stats) {\n        this.setState({\n          deployed_model: deployed_model_stats,\n          deployed_model_bool: true,\n          loading: false\n        });\n        this.fetchFromDB();\n      }.bind(this)\n    );\n\n    socket.on(\n      \"error\",\n      function(error) {\n        this.setState({ error_data: error.message, loading: false });\n      }.bind(this)\n    );\n\n    // this.setState({ loading: false });\n  };\n\n  render() {\n    return (\n      <div>\n        <Form onSubmit={this.onSubmit} style={styles}>\n          <h5>\n            <strong>Make a new model:</strong>\n          </h5>\n          <FormGroup>\n            <Label for=\"Model-Name\">Model Name:</Label>\n            <Input\n              type=\"text\"\n              name=\"model_name\"\n              id=\"model_name\"\n              value={this.state.model_name}\n              onChange={this.onChange}\n              required\n            />\n          </FormGroup>\n          <FormGroup>\n            <Label for=\"description\">Description:</Label>\n            <Input\n              type=\"text\"\n              name=\"description\"\n              id=\"description\"\n              value={this.state.description}\n              onChange={this.onChange}\n              required\n            />\n          </FormGroup>\n          <p>Select Diseases:</p>\n          <ButtonToolbar>\n            <ButtonGroup>\n              {this.state.labels.map((label, index) => (\n                <Button\n                  color=\"success\"\n                  onClick={() => this.onCheckboxBtnClick(label)}\n                  active={this.state.diseases.includes(label)}\n                  key={index}\n                >\n                  {label}\n                </Button>\n              ))}\n            </ButtonGroup>\n            <ButtonGroup>\n              <Button onClick={this.fetchFromDB}>\n                <i className=\"fa fa-refresh\"></i>\n              </Button>\n            </ButtonGroup>\n          </ButtonToolbar>\n          <br />\n          {!this.state.loading && <Button color=\"primary\">Deploy</Button>}\n          {this.state.loading && <Loading />}\n          <br />\n          {this.state.deployed_model_bool && (\n            <div style={stylestwo}>\n              <p>\n                QR-Code:\n                <QRModal name={this.state.deployed_model.name} />\n              </p>\n            </div>\n          )}\n          {this.state.error_data && (\n            <div style={stylestwo}>\n              <p>\n                <Alert color=\"danger\">{this.state.error_data}</Alert>\n              </p>\n            </div>\n          )}\n          {this.state.after_train && (\n            <div style={stylestwo}>\n              <p>\n                <Alert color=\"warning\">\n                  Please reload after sometime minutes(it may take 10mins to 45\n                  min depending on the model).\n                </Alert>\n              </p>\n            </div>\n          )}\n        </Form>\n      </div>\n    );\n  }\n}\n\nexport default DeployForm;\n"]},"metadata":{},"sourceType":"module"}