{"ast":null,"code":"var _jsxFileName = \"/home/retr0/Documents/Projects/dsfh-dashboard/src/components/DeployForm.js\";\nimport React, { Component } from \"react\";\nimport { Button, Form, FormGroup, Label, Input, ButtonGroup, ButtonToolbar } from \"reactstrap\";\nimport { db } from \"../fire\";\nimport io from \"socket.io-client\";\nimport Loading from \"./Loading\";\nconst styles = {\n  marginTop: \"80px\"\n};\nconst socket = io(\"http://127.0.0.1:8000\");\n\nclass DeployForm extends Component {\n  constructor(...args) {\n    super(...args);\n    this.state = {\n      model_name: \"\",\n      description: \"\",\n      diseases: [],\n      labels: [],\n      deployed_model: {},\n      loading: false\n    };\n\n    this.onChange = e => {\n      this.setState({\n        [e.target.name]: e.target.value\n      });\n    };\n\n    this.fetchFromDB = () => {\n      this.setState({\n        loading: true\n      });\n      db.collection(\"Images\").get().then(querySnapshot => {\n        const data = querySnapshot.docs.map(doc => doc.data()); //console.log(data);\n\n        var temp = [];\n\n        for (var i = 0; i < data.length; i++) {\n          temp.push(data[i].label);\n        } //console.log(temp);\n\n\n        this.setState({\n          labels: temp\n        }); // array of cities objects\n      });\n      this.setState({\n        loading: false\n      });\n    };\n\n    this.onCheckboxBtnClick = selected => {\n      var array = [...this.state.diseases]; // make a separate copy of the array\n\n      var index = array.indexOf(selected);\n\n      if (index < 0) {\n        array.push(selected);\n      } else {\n        array.splice(index, 1);\n      }\n\n      this.setState({\n        diseases: array\n      });\n    };\n\n    this.onSubmit = event => {\n      this.setState({\n        loading: true\n      });\n      event.preventDefault();\n      const _this$state = this.state,\n            description = _this$state.description,\n            model_name = _this$state.model_name,\n            diseases = _this$state.diseases;\n      console.log(this.state);\n      this.setState({\n        model_name: \"\",\n        description: \"\",\n        diseases: []\n      });\n      socket.on(\"connect\", function () {\n        console.log(\"connected\");\n        socket.emit(\"train\", {\n          labels: diseases,\n          description: description,\n          model: model_name\n        });\n        console.log(\"emitted\");\n        socket.on(\"train response\", function (deployed_model_stats) {\n          console.log(deployed_model_stats); //this.fetchFromDB();\n\n          this.setState({\n            deployed_model: deployed_model_stats\n          });\n          this.setState({\n            loading: false\n          });\n        });\n      });\n    };\n  }\n\n  componentDidMount() {\n    this.fetchFromDB();\n  }\n\n  render() {\n    return React.createElement(\"div\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 93\n      },\n      __self: this\n    }, React.createElement(Form, {\n      onSubmit: this.onSubmit,\n      style: styles,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 94\n      },\n      __self: this\n    }, React.createElement(FormGroup, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 95\n      },\n      __self: this\n    }, React.createElement(Label, {\n      for: \"Model-Name\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 96\n      },\n      __self: this\n    }, \"Model Name:\"), React.createElement(Input, {\n      type: \"text\",\n      name: \"model_name\",\n      id: \"model_name\",\n      value: this.state.model_name,\n      onChange: this.onChange,\n      required: true,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 97\n      },\n      __self: this\n    })), React.createElement(FormGroup, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 106\n      },\n      __self: this\n    }, React.createElement(Label, {\n      for: \"description\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 107\n      },\n      __self: this\n    }, \"Description:\"), React.createElement(Input, {\n      type: \"text\",\n      name: \"description\",\n      id: \"description\",\n      value: this.state.description,\n      onChange: this.onChange,\n      required: true,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 108\n      },\n      __self: this\n    })), React.createElement(\"p\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 117\n      },\n      __self: this\n    }, \"Select Diseases:\"), React.createElement(ButtonToolbar, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 118\n      },\n      __self: this\n    }, React.createElement(ButtonGroup, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 119\n      },\n      __self: this\n    }, this.state.labels.map((label, index) => React.createElement(Button, {\n      color: \"success\",\n      onClick: () => this.onCheckboxBtnClick(label),\n      active: this.state.diseases.includes(label),\n      key: index,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 121\n      },\n      __self: this\n    }, label))), React.createElement(ButtonGroup, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 131\n      },\n      __self: this\n    }, React.createElement(Button, {\n      onClick: this.fetchFromDB,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 132\n      },\n      __self: this\n    }, React.createElement(\"i\", {\n      className: \"fa fa-refresh\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 133\n      },\n      __self: this\n    })))), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 137\n      },\n      __self: this\n    }), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 138\n      },\n      __self: this\n    }), !this.state.loading && React.createElement(Button, {\n      color: \"primary\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 139\n      },\n      __self: this\n    }, \"Deploy\"), this.state.loading && React.createElement(Loading, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 140\n      },\n      __self: this\n    })));\n  }\n\n}\n\nexport default DeployForm;","map":{"version":3,"sources":["/home/retr0/Documents/Projects/dsfh-dashboard/src/components/DeployForm.js"],"names":["React","Component","Button","Form","FormGroup","Label","Input","ButtonGroup","ButtonToolbar","db","io","Loading","styles","marginTop","socket","DeployForm","state","model_name","description","diseases","labels","deployed_model","loading","onChange","e","setState","target","name","value","fetchFromDB","collection","get","then","querySnapshot","data","docs","map","doc","temp","i","length","push","label","onCheckboxBtnClick","selected","array","index","indexOf","splice","onSubmit","event","preventDefault","console","log","on","emit","model","deployed_model_stats","componentDidMount","render","includes"],"mappings":"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","sourcesContent":["import React, { Component } from \"react\";\nimport {\n  Button,\n  Form,\n  FormGroup,\n  Label,\n  Input,\n  ButtonGroup,\n  ButtonToolbar\n} from \"reactstrap\";\nimport { db } from \"../fire\";\nimport io from \"socket.io-client\";\nimport Loading from \"./Loading\";\nconst styles = {\n  marginTop: \"80px\"\n};\nconst socket = io(\"http://127.0.0.1:8000\");\nclass DeployForm extends Component {\n  state = {\n    model_name: \"\",\n    description: \"\",\n    diseases: [],\n    labels: [],\n    deployed_model: {},\n    loading: false\n  };\n\n  onChange = e => {\n    this.setState({ [e.target.name]: e.target.value });\n  };\n  fetchFromDB = () => {\n    this.setState({ loading: true });\n    db.collection(\"Images\")\n      .get()\n      .then(querySnapshot => {\n        const data = querySnapshot.docs.map(doc => doc.data());\n        //console.log(data);\n        var temp = [];\n        for (var i = 0; i < data.length; i++) {\n          temp.push(data[i].label);\n        }\n        //console.log(temp);\n        this.setState({ labels: temp }); // array of cities objects\n      });\n    this.setState({ loading: false });\n  };\n  componentDidMount() {\n    this.fetchFromDB();\n  }\n  onCheckboxBtnClick = selected => {\n    var array = [...this.state.diseases]; // make a separate copy of the array\n    var index = array.indexOf(selected);\n    if (index < 0) {\n      array.push(selected);\n    } else {\n      array.splice(index, 1);\n    }\n\n    this.setState({ diseases: array });\n  };\n\n  onSubmit = event => {\n    this.setState({ loading: true });\n    event.preventDefault();\n    const { description, model_name, diseases } = this.state;\n    console.log(this.state);\n\n    this.setState({\n      model_name: \"\",\n      description: \"\",\n      diseases: []\n    });\n\n    socket.on(\"connect\", function() {\n      console.log(\"connected\");\n      socket.emit(\"train\", {\n        labels: diseases,\n        description: description,\n        model: model_name\n      });\n      console.log(\"emitted\");\n      socket.on(\"train response\", function(deployed_model_stats) {\n        console.log(deployed_model_stats);\n        //this.fetchFromDB();\n        this.setState({ deployed_model: deployed_model_stats });\n        this.setState({ loading: false });\n      });\n    });\n  };\n\n  render() {\n    return (\n      <div>\n        <Form onSubmit={this.onSubmit} style={styles}>\n          <FormGroup>\n            <Label for=\"Model-Name\">Model Name:</Label>\n            <Input\n              type=\"text\"\n              name=\"model_name\"\n              id=\"model_name\"\n              value={this.state.model_name}\n              onChange={this.onChange}\n              required\n            />\n          </FormGroup>\n          <FormGroup>\n            <Label for=\"description\">Description:</Label>\n            <Input\n              type=\"text\"\n              name=\"description\"\n              id=\"description\"\n              value={this.state.description}\n              onChange={this.onChange}\n              required\n            />\n          </FormGroup>\n          <p>Select Diseases:</p>\n          <ButtonToolbar>\n            <ButtonGroup>\n              {this.state.labels.map((label, index) => (\n                <Button\n                  color=\"success\"\n                  onClick={() => this.onCheckboxBtnClick(label)}\n                  active={this.state.diseases.includes(label)}\n                  key={index}\n                >\n                  {label}\n                </Button>\n              ))}\n            </ButtonGroup>\n            <ButtonGroup>\n              <Button onClick={this.fetchFromDB}>\n                <i className=\"fa fa-refresh\"></i>\n              </Button>\n            </ButtonGroup>\n          </ButtonToolbar>\n          <br />\n          <br />\n          {!this.state.loading && <Button color=\"primary\">Deploy</Button>}\n          {this.state.loading && <Loading />}\n        </Form>\n      </div>\n    );\n  }\n}\n\nexport default DeployForm;\n"]},"metadata":{},"sourceType":"module"}